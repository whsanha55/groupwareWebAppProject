<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bit.groupware.persistent.mapper.employee.MessageMapper">
	<insert id="insertMessage" parameterType="MessageVO" statementType="PREPARED">
	    insert into message(msg_no,sender_emp_no,recipient_emp_no,msg_title,msg_content)
		values(message_seq.nextval,#{senderEmployee.empNo},#{receipientEmployee.empNo},#{msgTitle},#{msgContent})
	</insert>
	
	<delete id="deleteMessage" parameterType="map" statementType="PREPARED" >	<!-- parameterType이상할수도 -->
		delete from message
		where msg_no in 
		<foreach item="msgNo" collection="msgNos" separator="," open="(" close=")">
			#{msgNo}
		</foreach>
	</delete>


	<resultMap id="MessageResultMap" type="MessageVO">
		<id property="msgNo" column="msg_no" />
		<result property="msgDate" column="msg_Date" />
		<result property="msgTitle" column="msg_title" />
		<result property="msgContent" column="msg_content" />
		
		<association property="senderEmployee" column="sender_emp_no" javaType="EmployeeVO">
			<id property="empNo" column="sender_emp_no" />
			<result property="empName" column="sender_emp_name" />
		</association>
		<association property="receipientEmployee" column="recipient_emp_no" javaType="EmployeeVO">
			<id property="empNo" column="recipient_emp_no" />
			<result property="empName" column="recipient_emp_name" />
		</association>
	</resultMap>
	<select id="selectMessage" parameterType="int" resultMap="MessageResultMap" statementType="PREPARED" >
 		select msg_no, sender_emp_no, recipient_emp_no, msg_content, msg_title, msg_Date,
		(select emp_name from employee where emp_no=msg.sender_emp_no) as sender_emp_name,
		(select emp_name from employee where emp_no=msg.recipient_emp_no) as recipient_emp_name
		from message msg
		where msg_no=#{msgNo}
	</select>
	
	
	    <update id="updateReceiver"  parameterType="ReceiverVO" statementType="PREPARED">
          update receiver
          set receiver_name = #{receiverName}
          where receiver_no = #{recieverNo}
      </update>
	
	
	<update id="updateMessageStatus" parameterType="int" statementType="PREPARED">
		
		update message
		set msg_isread = 1
		where msg_no = #{msgNo} 
		
	</update>
	
	
	
	<resultMap id="MessageListResultMap" type="MessageVO">
		<id property="msgNo" column="msg_no" />
		<result property="msgDate" column="msg_Date" />
		<result property="msgTitle" column="msg_title" />
		<result property="msgContent" column="msg_content" />
		<result property="isRead" column="msg_isread" />
		<result property="senderRemoval" column="sender_removal" />
		<result property="receipientRemoval" column="recipient_removal" />

		
		<association property="senderEmployee" column="sender_emp_no" javaType="EmployeeVO">
			<id property="empNo" column="sender_emp_no" />
			<result property="empName" column="sender_emp_name" />
		</association>
		<association property="receipientEmployee" column="recipient_emp_no" javaType="EmployeeVO">
			<id property="empNo" column="recipient_emp_no" />
			<result property="empName" column="recipient_emp_name" />
		</association>
	</resultMap>
	<select id="selectMessageList" parameterType="map" resultMap="MessageListResultMap" statementType="PREPARED" >
		
		select t2.*   
	    from (select rownum as rn, t1.* 
	        from(select msg_no,msg_date,msg_title,msg_content,msg_isread,sender_removal,recipient_removal,
	            sender_emp_no,recipient_emp_no,
	            (select emp_name from employee where emp_no=msg.sender_emp_no)as sender_emp_name,
	            (select emp_name from employee where emp_no=msg.recipient_emp_no)as recipient_emp_name
	            from message msg 
	                  
         <if test= "empNo != null">
         	where recipient_emp_no = #{empNo}
         </if>
         
         <if test="senderEmpNo != null">
         	where sender_emp_no = #{senderEmpNo}
         </if>
         
         
         <if test= "empNo != null">
         	order by msg_isread asc, msg_date desc   
         </if>
         
         <if test="senderEmpNo != null">
         	order by msg_date desc
         </if>	
         	
          )t1 )t2
          where <![CDATA[rn>=]]>#{startRow} and <![CDATA[rn<=]]>#{endRow}
	</select>
	
	
	<select id="selectMessageListCount" parameterType="map" resultType="int" statementType="PREPARED" >
		
		select count(*) from(select t2.*   
	    from (select rownum as rn, t1.* 
	        from(select msg_no,msg_date,msg_title,msg_content,msg_isread,sender_removal,recipient_removal,
	            sender_emp_no,recipient_emp_no,
	            (select emp_name from employee where emp_no=msg.sender_emp_no)as sender_emp_name,
	            (select emp_name from employee where emp_no=msg.recipient_emp_no)as recipient_emp_name
	            from message msg 
	                  
         <if test= "empNo != null">
         	where recipient_emp_no = #{empNo}
         </if>
         
         <if test="senderEmpNo != null">
         	where sender_emp_no = #{senderEmpNo}
         </if>
         	
         	order by msg_isread desc, msg_date desc
          )t1 )t2)

	</select>
	
	
	<select id="selectNewMessageCount" statementType="PREPARED" parameterType="String" resultType="int">
		select nvl(count(*), 0)
		from notification
		where emp_no = #{empNo}	
		
		union all
		
		select nvl(count(*), 0)
		from message
		where recipient_emp_no = #{empNo}
		and msg_isread = 0
		and recipient_removal = 0		
	</select>
		
	
</mapper>