<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<!-- spring security를 적용하지 않을 경로(url-pattern) 설정 -->
	<!-- <security:http pattern="" security="none" /> -->

    <bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
    
	<security:http use-expressions="true" pattern="/**">
		<security:custom-filter ref="filterSecurityInterceptor"
			before="FILTER_SECURITY_INTERCEPTOR" />
		<!-- 로그인폼 커스터마이징 -->
		<security:form-login login-page="/login.do"
			username-parameter="id" password-parameter="pwd"
			login-processing-url="/j_spring_security_check"  default-target-url="/index.do"
			authentication-failure-url="/login.do?fail=true" />

		<!-- 403페이지 -->
		<security:access-denied-handler ref="LoginFailController" />

		<!-- 로그아웃 커스터마이징 -->
		<security:logout invalidate-session="true"
			logout-success-url="/login.do" />
		<security:csrf disabled="true" />
	</security:http>



	<!-- Performs security handling of HTTP resource -->
	<bean id="filterSecurityInterceptor"
		class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="accessDecisionManager" />
		<property name="securityMetadataSource"
			ref="reloadableFilterInvocationSecurityMetadataSource" />
	</bean>

	<bean id="LoginFailController" class="com.bit.groupware.controller.LoginFailController" />

	<!-- ============================ 인증 처리 ================================ -->
   <!-- 	<bean id="passwordEncoder"
		              class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> -->

	<security:authentication-manager
		erase-credentials="true" id="authenticationManager">
		<security:authentication-provider
			user-service-ref="userDetailsService">
			<security:password-encoder ref="bcryptPasswordEncoder" /> 
		</security:authentication-provider>
	</security:authentication-manager>



	<!-- ============================ 권한 처리 ============================ -->
	<bean id="accessDecisionManager"
		class="org.springframework.security.access.vote.AffirmativeBased">
		<constructor-arg name="decisionVoters">
			<list>
				<bean class="org.springframework.security.access.vote.RoleVoter">
					<property name="rolePrefix" value="" />
				</bean>
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
		<property name="allowIfAllAbstainDecisions" value="false" />
	</bean>


	<bean id="reloadableFilterInvocationSecurityMetadataSource"
		class="com.bit.groupware.security.ReloadableFilterInvocationSecurityMetadataSource">
		<constructor-arg ref="requestMap" />
	</bean>


	<bean id="requestMap" class="com.bit.groupware.security.UrlResourcesMapFactoryBean"
		init-method="init" />

	<!-- ====================== 자원과 이를 접근할 수 있는 권한이 매핑된 정보 ================== -->
	<!-- <security:intercept-url pattern="/home.jsp" access="permitAll()" /> 
		<security:intercept-url pattern="/admin/**" access="authenticated()" /> <security:intercept-url 
		pattern="/admin/registerArticle.do" access="hasRole('ROLE_ADMIN')" /> -->


</beans>

































